id: postgres_taxi_flowable
namespace: zoomcamp

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: ['yellow','green']
    defaults: 'yellow'
  
  - id: year
    type: SELECT
    displayName: Select year
    values: ['2019','2020','2021']
    defaults: '2020'
  
variables:
  staging_table: "public.{{inputs.taxi}}_tripdata_staging"
  table: "public.{{inputs.taxi}}_tripdata"


tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      taxi: "{{inputs.taxi}}"
  
  - id: process_months
    type: io.kestra.plugin.core.flow.ForEach
    concurrencyLimit: 1
    values: ["01","02","03"]
    tasks:
      - id: extract
        type: io.kestra.plugin.scripts.shell.Commands
        outputFiles:
          - "*.csv"
        taskRunner:
          type: io.kestra.plugin.core.runner.Process
        commands:
          - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{inputs.taxi}}_tripdata_{{inputs.year}}-{{ taskrun.value }}.csv.gz | gunzip > {{inputs.taxi}}_tripdata_{{inputs.year}}-{{ taskrun.value }}.csv
      - id: if_yellow_taxi
        type: io.kestra.plugin.core.flow.If
        condition: "{{inputs.taxi == 'yellow'}}"
        then:
          - id: yellow_create_table
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
                  unique_row_id          text,
                  filename               text,
                  VendorID               text,
                  tpep_pickup_datetime   timestamp,
                  tpep_dropoff_datetime  timestamp,
                  passenger_count        integer,
                  trip_distance          double precision,
                  RatecodeID             text,
                  store_and_fwd_flag     text,
                  PULocationID           text,
                  DOLocationID           text,
                  payment_type           integer,
                  fare_amount            double precision,
                  extra                  double precision,
                  mta_tax                double precision,
                  tip_amount             double precision,
                  tolls_amount           double precision,
                  improvement_surcharge  double precision,
                  total_amount           double precision,
                  congestion_surcharge   double precision
              );

          - id: yellow_create_staging_table
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
                  unique_row_id          text,
                  filename               text,
                  VendorID               text,
                  tpep_pickup_datetime   timestamp,
                  tpep_dropoff_datetime  timestamp,
                  passenger_count        integer,
                  trip_distance          double precision,
                  RatecodeID             text,
                  store_and_fwd_flag     text,
                  PULocationID           text,
                  DOLocationID           text,
                  payment_type           integer,
                  fare_amount            double precision,
                  extra                  double precision,
                  mta_tax                double precision,
                  tip_amount             double precision,
                  tolls_amount           double precision,
                  improvement_surcharge  double precision,
                  total_amount           double precision,
                  congestion_surcharge   double precision
              );

          - id: yellow_truncate_staging_table
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              TRUNCATE TABLE {{render(vars.staging_table)}};
            
          - id: log_check_outputs_1
            type: io.kestra.plugin.core.log.Log
            message: "Extract outputs: {{ outputs.extract }}"

          - id: log_check_outputs_3
            type: io.kestra.plugin.core.log.Log
            message: "Extract outputs parent[0].taskrun: {{ parents[0].taskrun.value }}"

          - id: log_check_outputs_5
            type: io.kestra.plugin.core.log.Log
            message: "Extract outputs : {{ outputs.extract[parents[0].taskrun.value].outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ parents[0].taskrun.value ~ '.csv'] }}"

          - id: yellow_copy_in_to_staging_table
            type: io.kestra.plugin.jdbc.postgresql.CopyIn
            format: CSV
            from: "{{ outputs.extract[parents[0].taskrun.value].outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ parents[0].taskrun.value ~ '.csv'] }}"
            table: "{{render(vars.staging_table)}}"
            header: true
            columns: [VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,passenger_count,trip_distance,RatecodeID,store_and_fwd_flag,PULocationID,DOLocationID,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount,congestion_surcharge]

          - id: yellow_add_unique_id_and_filename
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              UPDATE {{render(vars.staging_table)}}
              SET 
                unique_row_id = md5(
                  COALESCE(CAST(VendorID AS text), '') ||
                  COALESCE(CAST(tpep_pickup_datetime AS text), '') || 
                  COALESCE(CAST(tpep_dropoff_datetime AS text), '') || 
                  COALESCE(PULocationID, '') || 
                  COALESCE(DOLocationID, '') || 
                  COALESCE(CAST(fare_amount AS text), '') || 
                  COALESCE(CAST(trip_distance AS text), '')      
                ),
                filename = '{{inputs.taxi}}_tripdata_{{inputs.year}}-{{parents[0].taskrun.value}}.csv';

          - id: yellow_merge_data
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              MERGE INTO {{render(vars.table)}} AS T
              USING {{render(vars.staging_table)}} AS S
              ON T.unique_row_id = S.unique_row_id
              WHEN NOT MATCHED THEN
                INSERT (
                  unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime,
                  passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID,
                  DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
                  improvement_surcharge, total_amount, congestion_surcharge
                )
                VALUES (
                  S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime,
                  S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID,
                  S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount,
                  S.improvement_surcharge, S.total_amount, S.congestion_surcharge
                );
      - id: if_green_taxi
        type: io.kestra.plugin.core.flow.If
        condition: "{{inputs.taxi == 'green'}}"
        then:
          - id: green_create_table
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
                  unique_row_id          text,
                  filename               text,
                  VendorID               text,
                  tpep_pickup_datetime   timestamp,
                  tpep_dropoff_datetime  timestamp,
                  passenger_count        integer,
                  trip_distance          double precision,
                  RatecodeID             text,
                  store_and_fwd_flag     text,
                  PULocationID           text,
                  DOLocationID           text,
                  payment_type           integer,
                  fare_amount            double precision,
                  extra                  double precision,
                  mta_tax                double precision,
                  tip_amount             double precision,
                  tolls_amount           double precision,
                  improvement_surcharge  double precision,
                  total_amount           double precision,
                  congestion_surcharge   double precision
              );

          - id: green_create_staging_table
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
                  unique_row_id          text,
                  filename               text,
                  VendorID               text,
                  tpep_pickup_datetime   timestamp,
                  tpep_dropoff_datetime  timestamp,
                  passenger_count        integer,
                  trip_distance          double precision,
                  RatecodeID             text,
                  store_and_fwd_flag     text,
                  PULocationID           text,
                  DOLocationID           text,
                  payment_type           integer,
                  fare_amount            double precision,
                  extra                  double precision,
                  mta_tax                double precision,
                  tip_amount             double precision,
                  tolls_amount           double precision,
                  improvement_surcharge  double precision,
                  total_amount           double precision,
                  congestion_surcharge   double precision
              );

          - id: green_truncate_staging_table
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              TRUNCATE TABLE {{render(vars.staging_table)}};

          - id: green_copy_in_to_staging_table
            type: io.kestra.plugin.jdbc.postgresql.CopyIn
            format: CSV
            from: "{{ outputs.extract[parents[0].taskrun.value].outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ parents[0].taskrun.value ~ '.csv'] }}"
            table: "{{render(vars.staging_table)}}"
            header: true
            columns: [VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,passenger_count,trip_distance,RatecodeID,store_and_fwd_flag,PULocationID,DOLocationID,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount,congestion_surcharge]

          - id: green_add_unique_id_and_filename
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              UPDATE {{render(vars.staging_table)}}
              SET 
                unique_row_id = md5(
                  COALESCE(CAST(VendorID AS text), '') ||
                  COALESCE(CAST(tpep_pickup_datetime AS text), '') || 
                  COALESCE(CAST(tpep_dropoff_datetime AS text), '') || 
                  COALESCE(PULocationID, '') || 
                  COALESCE(DOLocationID, '') || 
                  COALESCE(CAST(fare_amount AS text), '') || 
                  COALESCE(CAST(trip_distance AS text), '')      
                ),
                filename = '{{inputs.taxi}}_tripdata_{{inputs.year}}-{{parents[0].taskrun.value}}.csv';

          - id: green_merge_data
            type: io.kestra.plugin.jdbc.postgresql.Queries
            sql: |
              MERGE INTO {{render(vars.table)}} AS T
              USING {{render(vars.staging_table)}} AS S
              ON T.unique_row_id = S.unique_row_id
              WHEN NOT MATCHED THEN
                INSERT (
                  unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime,
                  passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID,
                  DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
                  improvement_surcharge, total_amount, congestion_surcharge
                )
                VALUES (
                  S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime,
                  S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID,
                  S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount,
                  S.improvement_surcharge, S.total_amount, S.congestion_surcharge
                );
      - id: purge_files
        type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
        description: This will remove output files. If you'd like to explore Kestra outputs, disable it.
pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://postgres:5432/ny_taxi
      username: sagar
      password: sagar
 